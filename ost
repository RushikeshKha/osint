#!/usr/bin/env bash
source osint.conf


#### Colors Output

RESET="\033[0m"     # Normal Colour
RED="\033[0;31m"    # Error / Issues
GREEN="\033[0;32m"  # Successful
BOLD="\033[01;01m"  # Highlight
WHITE="\033[1;37m"  # BOLD
YELLOW="\033[1;33m" # Warning
PADDING="  "
DPADDING="\t\t"

#### Other Colors / Status Code

LGRAY="\033[0;37m"   # Light Gray
LRED="\033[1;31m"    # Light Red
LGREEN="\033[1;32m"  # Light GREEN
LBLUE="\033[1;34m"   # Light Blue
LPURPLE="\033[1;35m" # Light Purple
LCYAN="\033[1;36m"   # Light Cyan
SORANGE="\033[0;33m" # Standar Orange
SBLUE="\033[0;34m"   # Standar Blue
SPURPLE="\033[0;35m" # Standar Purple
SCYAN="\033[0;36m"   # Standar Cyan
DGRAY="\033[1;30m"   # Dark Gray


## Check Folder Results
[[ ! -e "${OUT}" ]] &&
  mkdir -p "${OUT}" || true

# COMMAND LINE SWITCHES
while [[ "${#}" -gt 0 ]]; do
  args="${1}"
  case "$(echo ${args} | tr '[:upper:]' '[:lower:]')" in
  # Target
  "-d" | "--domain")
    DOMAIN="${2}"
    shift
    shift
    ;;
  "--domain="*)
    DOMAIN="${1#*=}"
    shift 1
    ;;
    # Help
  "-h" | "--help")
    goHelp
    exit 1
    ;;

    # sources
  "-s" | "--sources")
    SOURCE=true
    LIST=${2}
    shift
    shift

    ;;
    # Verbose
  "-v" | "--verbose")
    verbose=true
    shift
    ;;

  "-ps" | "--ping-sweep")
    PLUGIN_PING_SWEEP=true
    shift
    ;;

  "-rs" | "--resolver")
    PLUGIN_RESOLV_SD=true
    shift
    ;;

  "-sc" | "--status-code")
    PLUGIN_STATUS_CODE=true
    shift
    ;;

  "-nt" | "--nmap-top")
    PLUGIN_NMAP_PORTS=true
    shift
    ;;

  "-to" | "--takeover")
    PLUGIN_TAKEOVER=true
    shift
    ;;

  "-ws" | "--websocket")
    PLUGIN_WEBSOCKET=true
    shift
    ;;

  \
    "-cf" | "--cloudfare")
    PLUGIN_CFCHECK=true
    shift
    ;;

  \
    \
    "-ai" | "--apps-identifier")
    APPS_IDENTIFIER=true
    LIST_API=${2}
    shift
    shift
    ;;

  "-dp" | "--db-port")
    PLUGIN_DB_PORT=true
    shift
    ;;

  "-ep" | "--extract-params")
    PLUGIN_EXTRACT_PARAMS=true
    shift
    ;;

  \
    "-ss" | "--screenshot")
    PLUGIN_DOMAIN_SCREENSHOTS=true
    LIST_SCREENSHOT=${2}
    # PLUGIN_AQUATONE=true
    PLUGIN_GOWITNESS=true
    shift
    shift
    ;;

  \
    "-b" | "--bruteforce")
    PLUGIN_GOBUSTER=true
    shift
    ;;

  "-np" | "--no-passive")
    SOURCE=none
    shift
    ;;

  \
    "--no-probe")
    PLUGIN_HTTPROBE=false
    shift
    ;;

  "-o" | "--outfile")
    DESTINATION=true
    OUTFILE=$2
    shift
    shift
    ;;

  \
    "--html")
    REPORTS=1
    shift
    ;;

  "--slack")
    SLACK=true
    shift
    ;;

  \
    "--httpx")
    PLUGIN_HTTPX=true
    shift
    ;;

  \
  "--httpx-toolkit")
    PLUGIN_HTTPX_TOOLKIT=true
    shift
    ;;

  \
  "--smap")
    PLUGIN_SMAP=true
    shift
    ;;

  \
    "--dnsx")
    PLUGIN_DNSX=true
    shift
    ;;

  "--graph")
    PLUGIN_NGRAPH=true
    shift
    ;;

  "-gw" | "--gwordlist")
    PLUGIN_WORDLISTS=true
    shift
    ;;

  \
    "-a" | "--all")
    PLUGIN_DOMAIN_SCREENSHOTS=true
    PLUGIN_TAKEOVER=true
    PLUGIN_STATUS_CODE=true
    PLUGIN_RESOLV_SD=true
    PLUGIN_PING_SWEEP=true
    PLUGIN_DB_PORT=true
    PLUGIN_EXTRACT_PARAMS=true
    PLUGIN_HTTPX=true
    PLUGIN_DNSX=true
    PLUGIN_CFCHECK=true
    PLUGIN_NGRAPH=true
    PLUGIN_WORDLISTS=true
    shift
    ;;

  \
    \
    "-"*)
    echo -e " ${YELLOW}[i]${RESET} Invalid option: ${RED}${1}${RESET}" && shift && exit 1
    ;;
  *)
    echo -e " ${YELLOW}[i]${RESET} Invalid: Unknown option ${RED}${1}${RESET}" && shift && exit
    exit
    ;;
  esac
done

if [ -z "${DOMAIN}" ]; then
  echo "You need to specify a target to use. Type --help for command usage."
  exit
fi

## Check mandatory dependencies
dependencies=(nmap dig jq)
for dependency in "${dependencies[@]}"; do
  type -p "$dependency" &>/dev/null || {
    echo "error: Error: require ${dependency} but it's is not installed. Aborting." >&2
    exit 1
  }
done

## Check GNU grep for MacOS
if [[ "$(grep -V)" == *"BSD"* ]]; then
  echo "Error: require GNU grep. Aborting." >&2
  exit 1
fi

## Check 3rd dependencies

if [[ ${PLUGIN_WAPPALYZER} == true ]]; then
  command -v wappalyzer >/dev/null 2>&1 || {
    echo "Error: require wappalyzer for identify apps but it's is not installed. Aborting." >&2
    exit 1
  }
fi

SORT_DOMAINS() {
  #DATE_LOG=$(date +%m-%d-%Y)
  [[ ! -e "${OUT}/${DOMAIN}" ]] &&
    mkdir -p "${OUT}/${DOMAIN}" || true
  sed 's/\*\.//g' ${OUT}/*.log | grep -e "${DOMAIN}" | sort -u >${OUT}/${DOMAIN}/${RESULT_SUBDOMAIN}
  rm -r ${OUT}/*.log >/dev/null 2>&1 ##REMOVE LOG
  
  if [[ -f ${OUT}/${DOMAIN}/${RESULT_SUBDOMAIN} ]]; then
    COUNT=$(cat ${OUT}/${DOMAIN}/${RESULT_SUBDOMAIN} | wc -l)
    echo "Total subdomains: "$COUNT
    cat ${OUT}/${DOMAIN}/${RESULT_SUBDOMAIN} |
      while read VERBOSE; do
        echo $VERBOSE
      done
    #echo -e "\n${PADDING}${YELLOW}${PADDING}‚ç•${PADDING}${RESET}Total ${RESET}${DPADDING}\t\t[${GREEN}${COUNT}${RESET}]"
  fi

}

source ${Engine_CrtSH}
source ${Engine_Dnsdumpster}
source ${Engine_Subfinder}
current_date_time=$(date "+%Y-%m-%d %H:%M:%S")

echo $DOMAIN


if [[ ${SOURCE} == true ]]; then
  for arr in $(echo ${LIST} | tr "," "\n" | tr '[:upper:]' '[:lower:]'); do
    eval "${arr}=true"
  done
  [[ ${shodan} == true ]] && {
    SHODAN
    if [[ -f ${OUT_SHODAN} ]]; then
      COUNT=$(cat ${OUT_SHODAN} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }
  [[ ${virustotal} == true ]] && {
    VIRUSTOTAL
    if [[ -f ${OUT_VIRUSTOTAL} ]]; then
      COUNT=$(cat ${OUT_VIRUSTOTAL} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }
  [[ ${certspotter} == true ]] && {
    CERTSPOTTER
    if [[ -f ${OUT_CERTSPOTTER} ]]; then
      COUNT=$(cat ${OUT_CERTSPOTTER} | sort -u | wc -l)
      # echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${binaryedge} == true ]] && {
    BINARYEDGE
    if [[ -f ${OUT_BINARYEDGE} ]]; then
      COUNT=$(cat ${OUT_BINARYEDGE} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${hackertarget} == true ]] && {
    HACKERTARGET
    if [[ -f ${OUT_HACKERTARGET} ]]; then
      COUNT=$(cat ${OUT_HACKERTARGET} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${threatminer} == true ]] && {
    THREATMINER
    if [[ -f ${OUT_THREATMINER} ]]; then
      COUNT=$(cat ${OUT_THREATMINER} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${crtsh} == true ]] && {
    CERTSH
    if [[ -f ${OUT_CRTSH} ]]; then
      COUNT=$(cat ${OUT_CRTSH} | sort -u | wc -l) # gets unique subdomains
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${bufferover} == true ]] && {
    BUFFEROVER
    if [[ -f ${OUT_BUFFEROVER} ]]; then
      COUNT=$(cat ${OUT_BUFFEROVER} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${entrust} == true ]] && {
    #ENTRUST
    if [[ -f ${OUT_ENTRUST} ]]; then
      COUNT=$(cat ${OUT_ENTRUST} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${threatcrowd} == true ]] && {
    THREATCROWD
    if [[ -f ${OUT_THREATCROWD} ]]; then
      COUNT=$(cat ${OUT_THREATCROWD} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${dnsdumpster} == true ]] && {
    DNSDUMPSTER
    if [[ -f ${OUT_DNSDUMPSTER} ]]; then
      COUNT=$(cat ${OUT_DNSDUMPSTER} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${riddler} == true ]] && {
    RIDDLER
    if [[ -f ${OUT_RIDDLER} ]]; then
      COUNT=$(cat ${OUT_RIDDLER} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${webarchive} == true ]] && {
    WEBARCHIVE
    if [[ -f ${OUT_WEBARCHIVE} ]]; then
      COUNT=$(cat ${OUT_WEBARCHIVE} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${securitytrails} == true ]] && {
    SECURITY_TRAILS
    if [[ -f ${OUT_STRAILS} ]]; then
      COUNT=$(cat ${OUT_STRAILS} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${censys} == true ]] && {
    CENSYS
    if [[ -f ${OUT_CENSYS} ]]; then
      COUNT=$(cat ${OUT_CENSYS} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${rapiddns} == true ]] && {
    RAPIDDNS
    if [[ -f ${OUT_RAPIDDNS} ]]; then
      COUNT=$(cat ${OUT_RAPIDDNS} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${alienvault} == true ]] && {
    ALIENVAULT
    if [[ -f ${OUT_ALIENVAULT} ]]; then
      COUNT=$(cat ${OUT_ALIENVAULT} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${commoncrawl} == true ]] && {
    COMMONCRAWL
    if [[ -f ${OUT_COMMONCRAWL} ]]; then
      COUNT=$(cat ${OUT_COMMONCRAWL} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${urlscan} == true ]] && {
    URLSCAN
    if [[ -f ${OUT_URLSCAN} ]]; then
      COUNT=$(cat ${OUT_URLSCAN} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${dnsdb} == true ]] && {
    DNSDB
    if [[ -f ${OUT_DNSDB} ]]; then
      COUNT=$(cat ${OUT_DNSDB} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${spyse} == true ]] && {
    SPYSE
    if [[ -f ${OUT_SPYSE} ]]; then
      COUNT=$(cat ${OUT_SPYSE} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${riskiq} == true ]] && {
    RISKIQ
    if [[ -f ${OUT_RISKIQ} ]]; then
      COUNT=$(cat ${OUT_RISKIQ} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

  [[ ${fbcert} == true ]] && {
    FBCERT
    if [[ -f ${OUT_FBCERT} ]]; then
      COUNT=$(cat ${OUT_FBCERT} | sort -u | wc -l)
      #echo -e "\t${BLUE}-${RESET}${RESET} Subdomain total: ${COUNT}\n"
    fi
  }

elif

  [[ ${SOURCE} == false ]]
then
  args_source=(DNSDUMPSTER CERTSH SUBFINDER)
  for i in "${!args_source[@]}"; do
    "${args_source[i]}" &
  done
  wait
fi

echo -e "COUNT(SUBDOMAINS)"
echo -e "---------------------------------------------\n"
SORT_DOMAINS

## Calling Plugin


# Plugin to check Title,Status Code, Lenght
if [[ ${PLUGIN_HTTPX_TOOLKIT} == true ]]; then
  source ${APP_HTTPX_TOOLKIT}
  echo "HERE"
  exec_httpx_toolkit
fi

# Plugin for smap
if [[ ${PLUGIN_SMAP} == true ]]; then
  source ${APP_SMAP}
  exec_snamp
fi

if [[ ${PLUGIN_WAF_W00F} == true ]]; then
  source ${APP_WAF_W00F}
  echo "HERE"
  exec_waf_w00f
fi

#Remove Temporary RAW DATA []

#rm -r ${OUT_RAW_WEBARCHIVE} ${OUT_RAW_COMMONCRAWL} ${OUT_RAW_URLSCAN} ${OUT}/${RESULT_EXTRACT_PARAM} >/dev/null 2>&1